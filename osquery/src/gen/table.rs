use std::collections::HashMap;

// GENERATED! DO NOT MANGLE. source: table.go
use serde::{Deserialize, Serialize};

// Package table creates an osquery table plugin.
// Generate returns the rows generated by the table. The ctx argument
// should be checked for cancellation if the generation performs a
// substantial amount of work. The queryContext argument provides the
// deserialized JSON query context from osquery.
/*#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GenerateFunc {
}*/

pub struct Context;

pub type Row = HashMap<String, String>;

// ColumnDefinition defines the relevant information for a column in a table
// plugin. Both values are mandatory. Prefer using the *Column helpers to
// create ColumnDefinition structs.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Column {
    pub name: &'static str,
    pub kind: ColumnType,
}

// TextColumn is a helper for defining columns containing strings.
// IntegerColumn is a helper for defining columns containing integers.
// BigIntColumn is a helper for defining columns containing big integers.
// DoubleColumn is a helper for defining columns containing floating point
// values.
// ColumnType is a strongly typed representation of the data type string for a
// column definition. The named constants should be used.
#[derive(strum::ToString, Serialize, Deserialize, Debug, Clone)]
#[strum(serialize_all = "UPPERCASE")]
#[serde(rename_all = "UPPERCASE")]
pub enum ColumnType {
    Text,
    Integer,
    BigInt,
    Double,
    Unknown,
}

// The following column types are defined in osquery tables.h.
// QueryContext contains the constraints from the WHERE clause of the query,
// that can optionally be used to optimize the table generation. Note that the
// osquery SQLite engine will perform the filtering with these constraints, so
// it is not mandatory that they be used in table generation.
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct QueryContext {
    pub cols_used: Vec<String>,
    pub cols_used_bitset: usize,
    pub constraints: Vec<ConstraintList>,
}

// ConstraintList contains the details of the constraints for the given column.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ConstraintList {
    pub name: String,
    pub affinity: ColumnType,
    pub list: Vec<Constraint>,
}

// Constraint contains both an operator and an expression that are applied as
// constraints in the query.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Constraint {
    pub operator: Operator,
    pub expression: String,
}

// Operator is an enum of the osquery operators.
#[derive(serde_repr::Serialize_repr, serde_repr::Deserialize_repr, Debug, PartialEq, Clone)]
#[repr(u8)]
pub enum Operator {
    Equals = 2,
    GreaterThan = 4,
    LessThanOrEquals = 8,
    LessThan = 16,
    GreaterThanOrEquals = 32,
    Match = 64,
    Like = 65,
    Glob = 66,
    Regexp = 67,
    Unique = 1,
}
